// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eKlinika.WebAPI.Database;

namespace eKlinika.WebAPI.Migrations
{
    [DbContext(typeof(eKlinikaContext))]
    [Migration("20210219061552_ApotekaRacun_DatumUplate")]
    partial class ApotekaRacun_DatumUplate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("eKlinika.WebAPI.Database.Apotekar", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("OpisPosla");

                    b.HasKey("Id");

                    b.ToTable("Apotekar");
                });

            modelBuilder.Entity("eKlinika.WebAPI.Database.ApotekaRacun", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApotekarId");

                    b.Property<DateTime>("DatumIzdavanja");

                    b.Property<DateTime?>("DatumUplate");

                    b.Property<int>("PacijentId");

                    b.HasKey("Id");

                    b.HasIndex("ApotekarId");

                    b.HasIndex("PacijentId");

                    b.ToTable("ApotekaRacun");
                });

            modelBuilder.Entity("eKlinika.WebAPI.Database.Dijagnoza", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DoktorSpecijalizacija");

                    b.Property<string>("Opis");

                    b.Property<string>("StrucniOpis");

                    b.HasKey("Id");

                    b.ToTable("Dijagnoza");
                });

            modelBuilder.Entity("eKlinika.WebAPI.Database.Dobavljac", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DrzavaId");

                    b.Property<string>("Kontakt");

                    b.Property<string>("Naziv");

                    b.HasKey("Id");

                    b.HasIndex("DrzavaId");

                    b.ToTable("Dobavljac");
                });

            modelBuilder.Entity("eKlinika.WebAPI.Database.Doktor", b =>
                {
                    b.Property<int>("Id");

                    b.Property<DateTime>("DatumSpecijalizacije");

                    b.Property<string>("Specijalizacija");

                    b.Property<string>("Titula");

                    b.HasKey("Id");

                    b.ToTable("Doktor");
                });

            modelBuilder.Entity("eKlinika.WebAPI.Database.Drzava", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naziv");

                    b.Property<string>("Oznaka");

                    b.HasKey("Id");

                    b.ToTable("Drzava");
                });

            modelBuilder.Entity("eKlinika.WebAPI.Database.Grad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DrzavaId");

                    b.Property<string>("Naziv");

                    b.Property<string>("PostanskiBroj");

                    b.HasKey("Id");

                    b.HasIndex("DrzavaId");

                    b.ToTable("Grad");
                });

            modelBuilder.Entity("eKlinika.WebAPI.Database.Korisnici", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DatumRodjenja");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<int?>("GradId");

                    b.Property<string>("Ime");

                    b.Property<string>("JMBG");

                    b.Property<string>("LozinkaHash");

                    b.Property<string>("LozinkaSalt");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("Prezime");

                    b.Property<byte[]>("Slika");

                    b.Property<string>("Spol");

                    b.Property<string>("Ulica");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasName("CS_Email")
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("GradId");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasName("CS_UserName")
                        .HasFilter("[UserName] IS NOT NULL");

                    b.ToTable("Korisnici");
                });

            modelBuilder.Entity("eKlinika.WebAPI.Database.KorisniciUloge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("KorisnikId");

                    b.Property<int>("UlogaId");

                    b.HasKey("Id");

                    b.HasIndex("KorisnikId");

                    b.HasIndex("UlogaId");

                    b.ToTable("KorisniciUloge");
                });

            modelBuilder.Entity("eKlinika.WebAPI.Database.KrvnaGrupa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naziv");

                    b.HasKey("Id");

                    b.ToTable("KrvnaGrupa");
                });

            modelBuilder.Entity("eKlinika.WebAPI.Database.LabPretraga", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("MjernaJedinica");

                    b.Property<string>("Naziv");

                    b.Property<double>("ReferentnaVrijednostDonja");

                    b.Property<double>("ReferentnaVrijednostGornja");

                    b.Property<int>("VrstaPretrageId");

                    b.Property<int>("VrstaVr");

                    b.HasKey("Id");

                    b.HasIndex("VrstaPretrageId");

                    b.ToTable("LabPretraga");
                });

            modelBuilder.Entity("eKlinika.WebAPI.Database.Lijek", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("CijenaPoKomadu");

                    b.Property<string>("Naziv");

                    b.Property<bool>("PoReceptu");

                    b.Property<int>("ProizvodjacId");

                    b.Property<string>("Tip");

                    b.Property<int>("UkupnoNaStanju");

                    b.Property<string>("Uputstvo");

                    b.HasKey("Id");

                    b.HasIndex("ProizvodjacId");

                    b.ToTable("Lijek");
                });

            modelBuilder.Entity("eKlinika.WebAPI.Database.MedicinskaSestra", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Certifikati");

                    b.Property<string>("Kursevi");

                    b.HasKey("Id");

                    b.ToTable("MedicinskaSestra");
                });

            modelBuilder.Entity("eKlinika.WebAPI.Database.Modalitet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsReferentnaVrijednost")
                        .HasColumnName("isReferentnaVrijednost");

                    b.Property<int>("LabPretragaId");

                    b.Property<string>("Opis");

                    b.HasKey("Id");

                    b.HasIndex("LabPretragaId");

                    b.ToTable("Modalitet");
                });

            modelBuilder.Entity("eKlinika.WebAPI.Database.Narudzba", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DatumIsporuke");

                    b.Property<DateTime>("DatumNarudzbe");

                    b.Property<int>("DobavljacId");

                    b.HasKey("Id");

                    b.HasIndex("DobavljacId");

                    b.ToTable("Narudzba");
                });

            modelBuilder.Entity("eKlinika.WebAPI.Database.NarudzbaStavka", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Kolicina");

                    b.Property<int>("LijekId");

                    b.Property<int>("NarudzbaId");

                    b.HasKey("Id");

                    b.HasIndex("LijekId");

                    b.HasIndex("NarudzbaId");

                    b.ToTable("NarudzbaStavka");
                });

            modelBuilder.Entity("eKlinika.WebAPI.Database.Osoblje", b =>
                {
                    b.Property<int>("Id");

                    b.Property<DateTime>("DatumZaposlenja");

                    b.Property<int>("GodineStaza");

                    b.Property<string>("Jezici");

                    b.Property<string>("TipZaposlenja");

                    b.Property<string>("TrajanjeUgovora");

                    b.HasKey("Id");

                    b.ToTable("Osoblje");
                });

            modelBuilder.Entity("eKlinika.WebAPI.Database.Pacijent", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Alergije");

                    b.Property<string>("BrojKartona");

                    b.Property<string>("BrojKnjizice");

                    b.Property<DateTime>("DatumRegistracije");

                    b.Property<int>("KrvnaGrupaId");

                    b.Property<string>("SpecijalniZahtjevi");

                    b.Property<double>("Tezina");

                    b.Property<int>("Visina");

                    b.HasKey("Id");

                    b.HasIndex("KrvnaGrupaId");

                    b.ToTable("Pacijent");
                });

            modelBuilder.Entity("eKlinika.WebAPI.Database.Pregled", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DatumPregleda");

                    b.Property<DateTime>("DatumRezervacije");

                    b.Property<int>("DoktorId");

                    b.Property<bool>("IsOdrzan")
                        .HasColumnName("isOdrzan");

                    b.Property<int>("MedicinskaSestraId");

                    b.Property<string>("Napomena");

                    b.Property<int>("PacijentId");

                    b.Property<string>("Prioritet");

                    b.Property<string>("TipPregleda");

                    b.HasKey("Id");

                    b.HasIndex("DoktorId");

                    b.HasIndex("MedicinskaSestraId");

                    b.HasIndex("PacijentId");

                    b.ToTable("Pregled");
                });

            modelBuilder.Entity("eKlinika.WebAPI.Database.Proizvodjac", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Kontakt");

                    b.Property<string>("Naziv");

                    b.HasKey("Id");

                    b.ToTable("Proizvodjac");
                });

            modelBuilder.Entity("eKlinika.WebAPI.Database.RacunStavka", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApotekaRacunId");

                    b.Property<int>("Kolicina");

                    b.Property<int>("LijekId");

                    b.HasKey("Id");

                    b.HasIndex("ApotekaRacunId");

                    b.HasIndex("LijekId");

                    b.ToTable("RacunStavka");
                });

            modelBuilder.Entity("eKlinika.WebAPI.Database.Recept", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DatumIzdavanja");

                    b.Property<bool>("IsObradjen");

                    b.Property<int>("LijekId");

                    b.Property<int>("PregledId");

                    b.Property<string>("Uputstvo");

                    b.HasKey("Id");

                    b.HasIndex("LijekId");

                    b.HasIndex("PregledId");

                    b.ToTable("Recept");
                });

            modelBuilder.Entity("eKlinika.WebAPI.Database.RezultatPretrage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LabPretragaId");

                    b.Property<int?>("ModalitetId");

                    b.Property<double?>("NumerickaVrijednost");

                    b.Property<int>("UputnicaId");

                    b.HasKey("Id");

                    b.HasIndex("LabPretragaId");

                    b.HasIndex("ModalitetId");

                    b.HasIndex("UputnicaId");

                    b.ToTable("RezultatPretrage");
                });

            modelBuilder.Entity("eKlinika.WebAPI.Database.Uloge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naziv");

                    b.Property<string>("Opis");

                    b.HasKey("Id");

                    b.ToTable("Uloge");
                });

            modelBuilder.Entity("eKlinika.WebAPI.Database.Uplata", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BrojUplatnice");

                    b.Property<DateTime>("DatumUplate");

                    b.Property<double>("Iznos");

                    b.Property<string>("Namjena");

                    b.Property<int>("PacijentId");

                    b.Property<int?>("PregledId");

                    b.Property<string>("ZiroRacun");

                    b.HasKey("Id");

                    b.HasIndex("PacijentId");

                    b.HasIndex("PregledId");

                    b.ToTable("Uplata");
                });

            modelBuilder.Entity("eKlinika.WebAPI.Database.Uputnica", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DatumRezultata");

                    b.Property<DateTime>("DatumUputnice");

                    b.Property<bool>("IsGotovNalaz");

                    b.Property<int>("LaboratorijDoktorId");

                    b.Property<int>("PacijentId");

                    b.Property<int>("UputioDoktorId");

                    b.Property<int>("VrstaPretrageId");

                    b.HasKey("Id");

                    b.HasIndex("LaboratorijDoktorId");

                    b.HasIndex("PacijentId");

                    b.HasIndex("UputioDoktorId");

                    b.HasIndex("VrstaPretrageId");

                    b.ToTable("Uputnica");
                });

            modelBuilder.Entity("eKlinika.WebAPI.Database.UstanovljenaDijagnoza", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Detalji");

                    b.Property<int>("DijagnozaId");

                    b.Property<string>("Napomena");

                    b.Property<int>("PregledId");

                    b.HasKey("Id");

                    b.HasIndex("DijagnozaId");

                    b.HasIndex("PregledId");

                    b.ToTable("UstanovljenaDijagnoza");
                });

            modelBuilder.Entity("eKlinika.WebAPI.Database.VrstaPretrage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naziv");

                    b.HasKey("Id");

                    b.ToTable("VrstaPretrage");
                });

            modelBuilder.Entity("eKlinika.WebAPI.Database.Apotekar", b =>
                {
                    b.HasOne("eKlinika.WebAPI.Database.Osoblje", "Osoblje")
                        .WithOne("Apotekar")
                        .HasForeignKey("eKlinika.WebAPI.Database.Apotekar", "Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eKlinika.WebAPI.Database.ApotekaRacun", b =>
                {
                    b.HasOne("eKlinika.WebAPI.Database.Apotekar", "Apotekar")
                        .WithMany("ApotekaRacun")
                        .HasForeignKey("ApotekarId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("eKlinika.WebAPI.Database.Pacijent", "Pacijent")
                        .WithMany()
                        .HasForeignKey("PacijentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eKlinika.WebAPI.Database.Dobavljac", b =>
                {
                    b.HasOne("eKlinika.WebAPI.Database.Drzava", "Drzava")
                        .WithMany("Dobavljac")
                        .HasForeignKey("DrzavaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eKlinika.WebAPI.Database.Doktor", b =>
                {
                    b.HasOne("eKlinika.WebAPI.Database.Osoblje", "Osoblje")
                        .WithOne("Doktor")
                        .HasForeignKey("eKlinika.WebAPI.Database.Doktor", "Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eKlinika.WebAPI.Database.Grad", b =>
                {
                    b.HasOne("eKlinika.WebAPI.Database.Drzava", "Drzava")
                        .WithMany("Grad")
                        .HasForeignKey("DrzavaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eKlinika.WebAPI.Database.Korisnici", b =>
                {
                    b.HasOne("eKlinika.WebAPI.Database.Grad", "Grad")
                        .WithMany("Korisnici")
                        .HasForeignKey("GradId");
                });

            modelBuilder.Entity("eKlinika.WebAPI.Database.KorisniciUloge", b =>
                {
                    b.HasOne("eKlinika.WebAPI.Database.Korisnici", "Korisnik")
                        .WithMany("KorisniciUloge")
                        .HasForeignKey("KorisnikId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("eKlinika.WebAPI.Database.Uloge", "Uloga")
                        .WithMany("KorisniciUloge")
                        .HasForeignKey("UlogaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eKlinika.WebAPI.Database.LabPretraga", b =>
                {
                    b.HasOne("eKlinika.WebAPI.Database.VrstaPretrage", "VrstaPretrage")
                        .WithMany("LabPretraga")
                        .HasForeignKey("VrstaPretrageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eKlinika.WebAPI.Database.Lijek", b =>
                {
                    b.HasOne("eKlinika.WebAPI.Database.Proizvodjac", "Proizvodjac")
                        .WithMany("Lijek")
                        .HasForeignKey("ProizvodjacId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eKlinika.WebAPI.Database.MedicinskaSestra", b =>
                {
                    b.HasOne("eKlinika.WebAPI.Database.Osoblje", "Osoblje")
                        .WithOne("MedicinskaSestra")
                        .HasForeignKey("eKlinika.WebAPI.Database.MedicinskaSestra", "Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eKlinika.WebAPI.Database.Modalitet", b =>
                {
                    b.HasOne("eKlinika.WebAPI.Database.LabPretraga", "LabPretraga")
                        .WithMany("Modalitet")
                        .HasForeignKey("LabPretragaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eKlinika.WebAPI.Database.Narudzba", b =>
                {
                    b.HasOne("eKlinika.WebAPI.Database.Dobavljac", "Dobavljac")
                        .WithMany("Narudzba")
                        .HasForeignKey("DobavljacId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eKlinika.WebAPI.Database.NarudzbaStavka", b =>
                {
                    b.HasOne("eKlinika.WebAPI.Database.Lijek", "Lijek")
                        .WithMany("NarudzbaStavka")
                        .HasForeignKey("LijekId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("eKlinika.WebAPI.Database.Narudzba", "Narudzba")
                        .WithMany("NarudzbaStavka")
                        .HasForeignKey("NarudzbaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eKlinika.WebAPI.Database.Osoblje", b =>
                {
                    b.HasOne("eKlinika.WebAPI.Database.Korisnici", "Korisnik")
                        .WithOne("Osoblje")
                        .HasForeignKey("eKlinika.WebAPI.Database.Osoblje", "Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eKlinika.WebAPI.Database.Pacijent", b =>
                {
                    b.HasOne("eKlinika.WebAPI.Database.Korisnici", "Korisnik")
                        .WithOne("Pacijent")
                        .HasForeignKey("eKlinika.WebAPI.Database.Pacijent", "Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("eKlinika.WebAPI.Database.KrvnaGrupa", "KrvnaGrupa")
                        .WithMany("Pacijent")
                        .HasForeignKey("KrvnaGrupaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eKlinika.WebAPI.Database.Pregled", b =>
                {
                    b.HasOne("eKlinika.WebAPI.Database.Doktor", "Doktor")
                        .WithMany("Pregled")
                        .HasForeignKey("DoktorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("eKlinika.WebAPI.Database.MedicinskaSestra", "MedicinskaSestra")
                        .WithMany("Pregled")
                        .HasForeignKey("MedicinskaSestraId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("eKlinika.WebAPI.Database.Pacijent", "Pacijent")
                        .WithMany()
                        .HasForeignKey("PacijentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eKlinika.WebAPI.Database.RacunStavka", b =>
                {
                    b.HasOne("eKlinika.WebAPI.Database.ApotekaRacun", "ApotekaRacun")
                        .WithMany("RacunStavka")
                        .HasForeignKey("ApotekaRacunId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("eKlinika.WebAPI.Database.Lijek", "Lijek")
                        .WithMany("RacunStavka")
                        .HasForeignKey("LijekId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eKlinika.WebAPI.Database.Recept", b =>
                {
                    b.HasOne("eKlinika.WebAPI.Database.Lijek", "Lijek")
                        .WithMany("Recept")
                        .HasForeignKey("LijekId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("eKlinika.WebAPI.Database.Pregled", "Pregled")
                        .WithMany("Recept")
                        .HasForeignKey("PregledId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eKlinika.WebAPI.Database.RezultatPretrage", b =>
                {
                    b.HasOne("eKlinika.WebAPI.Database.LabPretraga", "LabPretraga")
                        .WithMany("RezultatPretrage")
                        .HasForeignKey("LabPretragaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("eKlinika.WebAPI.Database.Modalitet", "Modalitet")
                        .WithMany("RezultatPretrage")
                        .HasForeignKey("ModalitetId");

                    b.HasOne("eKlinika.WebAPI.Database.Uputnica", "Uputnica")
                        .WithMany()
                        .HasForeignKey("UputnicaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eKlinika.WebAPI.Database.Uplata", b =>
                {
                    b.HasOne("eKlinika.WebAPI.Database.Pacijent", "Pacijent")
                        .WithMany()
                        .HasForeignKey("PacijentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("eKlinika.WebAPI.Database.Pregled", "Pregled")
                        .WithMany("Uplata")
                        .HasForeignKey("PregledId");
                });

            modelBuilder.Entity("eKlinika.WebAPI.Database.Uputnica", b =>
                {
                    b.HasOne("eKlinika.WebAPI.Database.Doktor", "LaboratorijDoktor")
                        .WithMany()
                        .HasForeignKey("LaboratorijDoktorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("eKlinika.WebAPI.Database.Pacijent", "Pacijent")
                        .WithMany()
                        .HasForeignKey("PacijentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("eKlinika.WebAPI.Database.Doktor", "UputioDoktor")
                        .WithMany()
                        .HasForeignKey("UputioDoktorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("eKlinika.WebAPI.Database.VrstaPretrage", "VrstaPretrage")
                        .WithMany("Uputnica")
                        .HasForeignKey("VrstaPretrageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eKlinika.WebAPI.Database.UstanovljenaDijagnoza", b =>
                {
                    b.HasOne("eKlinika.WebAPI.Database.Dijagnoza", "Dijagnoza")
                        .WithMany("UstanovljenaDijagnoza")
                        .HasForeignKey("DijagnozaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("eKlinika.WebAPI.Database.Pregled", "Pregled")
                        .WithMany("UstanovljenaDijagnoza")
                        .HasForeignKey("PregledId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
